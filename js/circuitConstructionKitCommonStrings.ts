// Copyright 2021-2022, University of Colorado Boulder

/**
 * Auto-generated from modulify, DO NOT manually modify.
 */
/* eslint-disable */
import getStringModule from '../../chipper/js/getStringModule.js';
import TReadOnlyProperty from '../../axon/js/TReadOnlyProperty.js';
import circuitConstructionKitCommon from './circuitConstructionKitCommon.js';

type StringsType = {
  'circuit-construction-kit-common': {
    'title': string;
    'titleProperty': TReadOnlyProperty<string>;
  };
  'schematicStandard': string;
  'schematicStandardProperty': TReadOnlyProperty<string>;
  'realBulb': string;
  'realBulbProperty': TReadOnlyProperty<string>;
  'ieee': string;
  'ieeeProperty': TReadOnlyProperty<string>;
  'iec': string;
  'iecProperty': TReadOnlyProperty<string>;
  'british': string;
  'britishProperty': TReadOnlyProperty<string>;
  'animationSpeedLimitReached': string;
  'animationSpeedLimitReachedProperty': TReadOnlyProperty<string>;
  'acSource': string;
  'acSourceProperty': TReadOnlyProperty<string>;
  'advanced': string;
  'advancedProperty': TReadOnlyProperty<string>;
  'resistor': string;
  'resistorProperty': TReadOnlyProperty<string>;
  'capacitor': string;
  'capacitorProperty': TReadOnlyProperty<string>;
  'inductor': string;
  'inductorProperty': TReadOnlyProperty<string>;
  'stopwatch': string;
  'stopwatchProperty': TReadOnlyProperty<string>;
  'fuse': string;
  'fuseProperty': TReadOnlyProperty<string>;
  'time': string;
  'timeProperty': TReadOnlyProperty<string>;
  'oneSecond': string;
  'oneSecondProperty': TReadOnlyProperty<string>;
  'capacitance': string;
  'capacitanceProperty': TReadOnlyProperty<string>;
  'inductance': string;
  'inductanceProperty': TReadOnlyProperty<string>;
  'currentRating': string;
  'currentRatingProperty': TReadOnlyProperty<string>;
  'tiny': string;
  'tinyProperty': TReadOnlyProperty<string>;
  'lots': string;
  'lotsProperty': TReadOnlyProperty<string>;
  'phaseShift': string;
  'phaseShiftProperty': TReadOnlyProperty<string>;
  'coin': string;
  'coinProperty': TReadOnlyProperty<string>;
  'dollarBill': string;
  'dollarBillProperty': TReadOnlyProperty<string>;
  'eraser': string;
  'eraserProperty': TReadOnlyProperty<string>;
  'pencil': string;
  'pencilProperty': TReadOnlyProperty<string>;
  'hand': string;
  'handProperty': TReadOnlyProperty<string>;
  'dog': string;
  'dogProperty': TReadOnlyProperty<string>;
  'paperClip': string;
  'paperClipProperty': TReadOnlyProperty<string>;
  'wireResistivity': string;
  'wireResistivityProperty': TReadOnlyProperty<string>;
  'batteryResistance': string;
  'batteryResistanceProperty': TReadOnlyProperty<string>;
  'sourceResistance': string;
  'sourceResistanceProperty': TReadOnlyProperty<string>;
  'battery': string;
  'batteryProperty': TReadOnlyProperty<string>;
  'lightBulb': string;
  'lightBulbProperty': TReadOnlyProperty<string>;
  'addRealBulbs': string;
  'addRealBulbsProperty': TReadOnlyProperty<string>;
  'switch': string;
  'switchProperty': TReadOnlyProperty<string>;
  'wire': string;
  'wireProperty': TReadOnlyProperty<string>;
  'electrons': string;
  'electronsProperty': TReadOnlyProperty<string>;
  'conventional': string;
  'conventionalProperty': TReadOnlyProperty<string>;
  'tapCircuitElementToEdit': string;
  'tapCircuitElementToEditProperty': TReadOnlyProperty<string>;
  'current': string;
  'currentProperty': TReadOnlyProperty<string>;
  'showCurrent': string;
  'showCurrentProperty': TReadOnlyProperty<string>;
  'resistance': string;
  'resistanceProperty': TReadOnlyProperty<string>;
  'voltage': string;
  'voltageProperty': TReadOnlyProperty<string>;
  'voltageWithUnits': string;
  'voltageWithUnitsProperty': TReadOnlyProperty<string>;
  'voltageChart': string;
  'voltageChartProperty': TReadOnlyProperty<string>;
  'currentWithUnits': string;
  'currentWithUnitsProperty': TReadOnlyProperty<string>;
  'currentChart': string;
  'currentChartProperty': TReadOnlyProperty<string>;
  'frequency': string;
  'frequencyProperty': TReadOnlyProperty<string>;
  'voltmeter': string;
  'voltmeterProperty': TReadOnlyProperty<string>;
  'ammeter': string;
  'ammeterProperty': TReadOnlyProperty<string>;
  'ammeters': string;
  'ammetersProperty': TReadOnlyProperty<string>;
  'labels': string;
  'labelsProperty': TReadOnlyProperty<string>;
  'values': string;
  'valuesProperty': TReadOnlyProperty<string>;
  'ohms': string;
  'ohmsProperty': TReadOnlyProperty<string>;
  'voltageUnits': string;
  'voltageUnitsProperty': TReadOnlyProperty<string>;
  'voltageVoltsValuePattern': string;
  'voltageVoltsValuePatternProperty': TReadOnlyProperty<string>;
  'frequencyHzValuePattern': string;
  'frequencyHzValuePatternProperty': TReadOnlyProperty<string>;
  'currentUnits': string;
  'currentUnitsProperty': TReadOnlyProperty<string>;
  'capacitanceUnits': string;
  'capacitanceUnitsProperty': TReadOnlyProperty<string>;
  'inductanceUnits': string;
  'inductanceUnitsProperty': TReadOnlyProperty<string>;
  'fuseValue': string;
  'fuseValueProperty': TReadOnlyProperty<string>;
  'resistanceOhmsSymbol': string;
  'resistanceOhmsSymbolProperty': TReadOnlyProperty<string>;
  'capacitanceFaradsSymbol': string;
  'capacitanceFaradsSymbolProperty': TReadOnlyProperty<string>;
  'inductanceHenriesSymbol': string;
  'inductanceHenriesSymbolProperty': TReadOnlyProperty<string>;
  'resistanceOhmsValuePattern': string;
  'resistanceOhmsValuePatternProperty': TReadOnlyProperty<string>;
  'theSwitchIsClosed': string;
  'theSwitchIsClosedProperty': TReadOnlyProperty<string>;
  'theSwitchIsOpen': string;
  'theSwitchIsOpenProperty': TReadOnlyProperty<string>;
  'ammeterReadout': string;
  'ammeterReadoutProperty': TReadOnlyProperty<string>;
  'magnitude': string;
  'magnitudeProperty': TReadOnlyProperty<string>;
  'signed': string;
  'signedProperty': TReadOnlyProperty<string>;
  'dataOutOfRange': string;
  'dataOutOfRangeProperty': TReadOnlyProperty<string>;
};

const circuitConstructionKitCommonStrings = getStringModule( 'CIRCUIT_CONSTRUCTION_KIT_COMMON' ) as StringsType;

circuitConstructionKitCommon.register( 'circuitConstructionKitCommonStrings', circuitConstructionKitCommonStrings );

export default circuitConstructionKitCommonStrings;
